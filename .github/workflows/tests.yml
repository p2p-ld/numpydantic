name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        platform: ["ubuntu-latest", "macos-latest", "windows-latest"]
        numpy-version: ["<2.0.0", ">=2.0.0"]
        pydantic-version: ["2.7.0", "latest"]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        exclude:
          # no wheels for 2.7.0 in python 3.13
          - pydantic-version: "2.7.0"
            python-version: "3.13"
          # let's call python 3.12 the last version we're going to support with numpy <2
          # they don't provide wheels for <2 in 3.13 and beyond.
          # only test on oldest supported versions and 3.12
          - numpy-version: "<2.0.0"
            python-version: "3.10"
          - numpy-version: "<2.0.0"
            python-version: "3.11"
          - numpy-version: "<2.0.0"
            python-version: "3.13"
          # Don't test intermediate versions on non-linux OSes, to save test time.
          - platform: "macos-latest"
            python-version: "3.10"
          - platform: "macos-latest"
            python-version: "3.11"
          - platform: "macos-latest"
            python-version: "3.12"
          - platform: "windows-latest"
            python-version: "3.10"
          - platform: "windows-latest"
            python-version: "3.11"
          - platform: "windows-latest"
            python-version: "3.12"

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install -e ".[tests]"

      - name: Install numpy version
        run: pip install "numpy${{ matrix.numpy-version }}"

      - name: Install pydantic version
        if: matrix.pydantic-version != 'latest'
        run: pip install "pydantic==${{ matrix.pydantic-version }} "

      - name: Run Tests
        run: pytest

      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2.3.0
        if: runner.os != 'macOS'
        with:
          flag-name: run-${{ join(matrix.*, '-') }}
          parallel: true
          debug: true

  finish-coverage:
    needs: test
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2.3.0
        with:
          parallel-finished: true